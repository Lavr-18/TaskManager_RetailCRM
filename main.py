import os
import json
import pytz
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from dotenv import load_dotenv

from retailcrm_api import (
    get_recent_orders,
    create_task,
    update_order_comment,
    get_orders_by_delivery_date,
    get_orders_by_statuses,
    get_orders_by_method_and_date_range  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
)
from openai_processor import analyze_comment_with_openai  # –û—Å—Ç–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–æ–≤

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MARKER = ' üìÖ'  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ OpenAI (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏)

# –ù–û–í–´–ï –ú–ê–†–ö–ï–†–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
COMMENT_TASK_MARKER = ' [Task: Comment Needed]'  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
CONTACT_TASK_MARKER = ' [Task: Contact Needed]'  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è"
MISSED_CALL_TASK_MARKER = ' [Task: Missed Call Reglament Started]'  # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –ù–î–ó

# –ö–û–ù–°–¢–ê–ù–¢–ê –î–õ–Ø –ù–û–í–û–ì–û –†–ï–ì–õ–ê–ú–ï–ù–¢–ê
MISSED_CALL_METHOD = "vkhodiashchii-zvonok"

# –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
TRACKER_FILE = 'status_trackers.json'
STATUS_CONFIGS = {
    # –ö–ª—é—á: –°–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
    "klient-zhdet-foto-s-zakupki": {
        "max_days": 14,
        "task_text": "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º / —É—Ç–æ—á–Ω–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å / –ø–µ—Ä–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å"
    },
    "vizit-v-shourum": {
        "max_days": 7,
        "task_text": "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
    },
    "ozhidaet-oplaty": {
        "max_days": 7,
        "task_text": "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º/–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç"
    }
}
TRACKED_STATUSES = list(STATUS_CONFIGS.keys())

# –°–¢–ê–¢–£–°–´, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ù–£–ñ–ù–û —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.
ALLOWED_STATUSES = [
    "new",
    "gotovo-k-soglasovaniiu",
    "soglasovat-sostav",
    "agree-absence",
    "novyi-predoplachen",
    "novyi-oplachen",
    "availability-confirmed",
    "client-confirmed",
    "offer-analog",
    "ne-dozvonilis",
    "perezvonit-pozdnee",
    "otpravili-varianty-na-pochtu",
    "otpravili-varianty-v-vatsap",
    "ready-to-wait",
    "waiting-for-arrival",
    "klient-zhdet-foto-s-zakupki",
    "vizit-v-shourum",
    "ozhidaet-oplaty",
    "gotovim-kp",
    "kp-gotovo-k-zashchite",
    "soglasovanie-kp",
    "proekt-visiak",
    "soglasovano",
    "oplacheno",
    "prepayed",
    "soglasovan-ozhidaet-predoplaty",
    "vyezd-biologa-oplachen",
    "vyezd-biologa-zaplanirovano",
    "predoplata-poluchena",
    "oplata-ne-proshla",
    "proverka-nalichiia",
    "obsluzhivanie-zaplanirovano",
    "obsluzhivanie-soglasovanie",
    "predoplachen-soglasovanie",
    "servisnoe-obsluzhivanie-oplacheno",
    "zakaz-obrabotan-soglasovanie",
    "vyezd-biologa-soglasovanie"
]
# –ú–ï–¢–û–î–´, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–û –∏—Å–∫–ª—é—á–∏—Ç—å.
EXCLUDED_METHODS = ['servisnoe-obsluzhivanie', 'komus']

# –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
UNDELIVERED_CODES = ["self-delivery", "storonniaia-dostavka"]
DELIVERED_STATUSES = ["send-to-delivery", "dostavlen"]


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–û–ú –°–û–°–¢–û–Ø–ù–ò–Ø (–û–°–¢–ê–í–õ–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---

def load_trackers() -> Dict[str, Dict[str, str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    # –°–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞:
    # { 'status_code': { 'order_id': 'YYYY-MM-DD', ... } }
    default_trackers = {status: {} for status in TRACKED_STATUSES}

    if not os.path.exists(TRACKER_FILE):
        print(f"–§–∞–π–ª {TRACKER_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä.")
        return default_trackers

    try:
        with open(TRACKER_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            for status in TRACKED_STATUSES:
                if status not in data:
                    data[status] = {}
            return data
    except (IOError, json.JSONDecodeError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {TRACKER_FILE}: {e}. –ò—Å–ø–æ–ª—å–∑—É—é –ø—É—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä.")
        return default_trackers


def save_trackers(data: Dict[str, Dict[str, str]]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(TRACKER_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)
        print(f"–¢—Ä–µ–∫–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {TRACKER_FILE}.")
    except IOError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {TRACKER_FILE}: {e}")


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–¢–ê–¢–£–°–û–í (–û–°–¢–ê–í–õ–ï–ù–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---

def process_status_trackers(now_moscow: datetime):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –≤ —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–µ—Ä –∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á–∏.
    """
    print("\n--- –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è '–∑–∞–≤–∏—Å—à–∏—Ö' —Å—Ç–∞—Ç—É—Å–æ–≤ ---")

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞
    tracker_data = load_trackers()
    today_date_str = now_moscow.strftime('%Y-%m-%d')

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ CRM –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    crm_orders_data = get_orders_by_statuses(TRACKED_STATUSES)

    if not crm_orders_data or not crm_orders_data.get('orders'):
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∏–∑ CRM –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –°–æ—Ö—Ä–∞–Ω—è—é —Ç—Ä–µ–∫–µ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        save_trackers(tracker_data)
        print("-" * 50)
        return

    crm_orders_list = crm_orders_data['orders']
    # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å–ª–æ–≤–∞—Ä—å {order_id: status} –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    crm_current_statuses = {str(order['id']): order['status'] for order in crm_orders_list}
    crm_manager_ids = {str(order['id']): order.get('managerId') for order in crm_orders_list}

    # –ó–∞–¥–∞—á–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
    tomorrow_10am = (now_moscow + timedelta(days=1)).replace(hour=10, minute=0, second=0, microsecond=0)
    task_datetime_str = tomorrow_10am.strftime('%Y-%m-%d %H:%M')

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    for status_code, config in STATUS_CONFIGS.items():
        max_days = config["max_days"]
        task_text = config["task_text"]

        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '{status_code}' (–ª–∏–º–∏—Ç: {max_days} –¥–Ω.):")

        # --- –ß–∞—Å—Ç—å 3–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
        orders_to_remove = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        current_tracker = tracker_data.get(status_code, {}).copy()

        for order_id, date_added_str in current_tracker.items():
            order_id_int = int(order_id)
            current_status = crm_current_statuses.get(order_id)
            manager_id = crm_manager_ids.get(order_id)

            # –ü–†–û–í–ï–†–ö–ê 1: –ò–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å?
            if current_status != status_code:
                # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è -> —É–¥–∞–ª—è–µ–º –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
                print(f"  –ó–∞–∫–∞–∑ {order_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ '{current_status}'. –£–¥–∞–ª—è—é –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞.")
                orders_to_remove.append(order_id)
                continue

            # –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –¥–Ω–µ–π?
            if manager_id:
                try:
                    date_added = datetime.strptime(date_added_str, '%Y-%m-%d').replace(tzinfo=MOSCOW_TZ)
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–µ —Å—Ç—Ä–æ–≥–æ)
                    days_in_status = (now_moscow.date() - date_added.date()).days

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ days_in_status > max_days (—Ç.–µ., 8 –¥–Ω–µ–π > 7 –¥–Ω–µ–π)
                    if days_in_status > max_days:
                        # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç -> —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
                        print(f"  ‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–∏—Å –≤ —Å—Ç–∞—Ç—É—Å–µ {days_in_status} –¥–Ω–µ–π! –°—Ç–∞–≤–ª—é –∑–∞–¥–∞—á—É.")

                        commentary = (
                            f"–ó–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '{status_code}' —É–∂–µ {days_in_status} –¥–Ω–µ–π. "
                            f"–õ–∏–º–∏—Ç {max_days} –¥–Ω–µ–π –ø—Ä–µ–≤—ã—à–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {task_text}."
                        )

                        task_data = {
                            'text': task_text,
                            'commentary': commentary,
                            'datetime': task_datetime_str,  # –ó–∞–≤—Ç—Ä–∞ –≤ 10:00
                            'performerId': manager_id,
                            'order': {'id': order_id_int}
                        }

                        response = create_task(task_data)

                        if response.get('success'):
                            print(f"    ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")
                        else:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response}")

                        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
                        orders_to_remove.append(order_id)
                    else:
                        print(f"  –ó–∞–∫–∞–∑ {order_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ {days_in_status} –¥–Ω–µ–π. –û–ö.")

                except ValueError:
                    print(f"  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_added_str}' –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}. –£–¥–∞–ª—è—é.")
                    orders_to_remove.append(order_id)
            else:
                print(f"  –£ –∑–∞–∫–∞–∑–∞ {order_id} –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–∞.")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é
        for order_id in orders_to_remove:
            tracker_data[status_code].pop(order_id, None)

        # --- –ß–∞—Å—Ç—å 3–ë: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç—Ä–µ–∫–µ—Ä ---

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ CRM –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        new_orders_in_status = [
            str(order['id']) for order in crm_orders_list
            if order.get('status') == status_code
        ]

        for order_id in new_orders_in_status:
            if order_id not in tracker_data[status_code]:
                # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ -> –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
                tracker_data[status_code][order_id] = today_date_str
                print(f"  + –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—Ä–µ–∫–µ—Ä.")

    # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
    save_trackers(tracker_data)
    print("--- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")


def get_corrected_datetime(ai_datetime_str: str, current_script_time: datetime) -> str:
    # –û–°–¢–ê–í–õ–ï–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏, —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.
    2. –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ (OpenAI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 10:00), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç +1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    3. –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ (–ø–æ—Å–ª–µ 20:00), –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 10:00.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∫—Ä–∏–ø—Ç–∞
        now_moscow = datetime.now(MOSCOW_TZ)

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI
        task_dt = datetime.strptime(ai_datetime_str, '%Y-%m-%d %H:%M').replace(tzinfo=MOSCOW_TZ)

        # –ü–†–ê–í–ò–õ–û 1: –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.
        if task_dt.date() < now_moscow.date():
            raise ValueError("–ó–∞–¥–∞—á–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–µ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

        # –ü–†–ê–í–ò–õ–û 2: –ï—Å–ª–∏ OpenAI –≤–µ—Ä–Ω—É–ª –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10:00), –∏—Å–ø–æ–ª—å–∑—É–µ–º +1 —á–∞—Å
        if task_dt.hour == 10 and task_dt.minute == 0:
            task_dt = now_moscow + timedelta(hours=1)
            task_dt = task_dt.replace(second=0, microsecond=0)

        # –ü–†–ê–í–ò–õ–û 3: –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ (–ø–æ—Å–ª–µ 20:00), –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if task_dt.hour >= 20:
            task_dt = now_moscow + timedelta(days=1)
            task_dt = task_dt.replace(hour=10, minute=0, second=0, microsecond=0)

        return task_dt.strftime('%Y-%m-%d %H:%M')

    except (ValueError, TypeError) as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
        raise e


def extract_last_entries(comment: str, num_entries: int = 3) -> str:
    # –û–°–¢–ê–í–õ–ï–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –æ–±—ä–µ–¥–∏–Ω—è—è —ç—Ç–∏ –∑–∞–ø–∏—Å–∏.
    """
    lines = [line.strip() for line in comment.strip().split('\n') if line.strip()]

    unprocessed_lines = []
    for line in reversed(lines):
        if not line.endswith(MARKER.strip()):
            unprocessed_lines.insert(0, line)
        else:
            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 'num_entries' –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    return '\n'.join(unprocessed_lines[-num_entries:])


def process_undelivered_orders(orders_list: list, now_moscow: datetime):
    # –û–°–¢–ê–í–õ–ï–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ 21:00).
    –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –∫–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ü–µ–ª–µ–≤–æ–π, –∞ —Å—Ç–∞—Ç—É—Å –Ω–µ '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'.
    """

    print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ ---")

    tomorrow_10am = (now_moscow + timedelta(days=1)).replace(hour=10, minute=0, second=0, microsecond=0)
    task_datetime_str = tomorrow_10am.strftime('%Y-%m-%d %H:%M')

    for order_data in orders_list:
        order_id = order_data.get('id')
        manager_id = order_data.get('managerId')
        delivery_code = order_data.get('delivery', {}).get('code')
        order_status = order_data.get('status')

        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ID: {order_id}")

        if not manager_id:
            print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # 1. –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏
        if delivery_code not in UNDELIVERED_CODES:
            print(f"  –ö–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}' –Ω–µ—Ü–µ–ª–µ–≤–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # 2. –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" –∏–ª–∏ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        if order_status not in DELIVERED_STATUSES:
            print(
                f"  ‚ö†Ô∏è –ó–∞–∫–∞–∑ ID: {order_id} –∏–º–µ–µ—Ç –∫–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}', –Ω–æ —Å—Ç–∞—Ç—É—Å '{order_status}'. –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É.")

            commentary = (
                f"–ó–∞–∫–∞–∑ —Å–æ —Å–ø–æ—Å–æ–±–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}' –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{order_status}'. "
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å."
            )

            task_data = {
                'text': "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏",
                'commentary': commentary,
                'datetime': task_datetime_str,
                'performerId': manager_id,
                'order': {'id': order_id}
            }

            response = create_task(task_data)

            if response.get('success'):
                print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏': {response}")
        else:
            print(f"  –°—Ç–∞—Ç—É—Å '{order_status}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        print("-" * 50)


def process_order(order_data: dict):
    # –û–°–¢–ê–í–õ–ï–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –¢–ê–ö –ö–ê–ö –≠–¢–û –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏.
    –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∞ —Ç–∞–∫–∂–µ
    –ù–û–í–£–Æ –õ–û–ì–ò–ö–£ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á.
    """
    order_id = order_data.get('id')
    operator_comment = order_data.get('managerComment', '')
    manager_id = order_data.get('managerId')
    order_method = order_data.get('orderMethod')
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order_status = order_data.get('status')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    now_moscow = datetime.now(MOSCOW_TZ)

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ID: {order_id}")

    # --- –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
    # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
    if order_method in EXCLUDED_METHODS:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –º–µ—Ç–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è '{order_method}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –º–µ—Ç–æ–¥–æ–≤.")
        print("-" * 50)
        return

    # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É (–≤–∫–ª—é—á–µ–Ω–∏–µ)
    if order_status not in ALLOWED_STATUSES:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} —Å—Ç–∞—Ç—É—Å '{order_status}' –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        print("-" * 50)
        return
    # --- –ö–æ–Ω–µ—Ü —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---

    if not manager_id:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø (–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤) ---

    # 1. –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if COMMENT_TASK_MARKER in operator_comment:
        print(f"  ‚úÖ –í –∑–∞–∫–∞–∑–µ {order_id} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä {COMMENT_TASK_MARKER}. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        print("-" * 50)
        return

    # 2. –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if CONTACT_TASK_MARKER in operator_comment:
        print(f"  ‚úÖ –í –∑–∞–∫–∞–∑–µ {order_id} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä {CONTACT_TASK_MARKER}. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è.")
        print("-" * 50)
        return

    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ---

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ü–£–°–¢–û–ì–û –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–°—Ü–µ–Ω–∞—Ä–∏–π –ê) ---

    if not operator_comment:
        print(f"  ‚ö†Ô∏è –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")

        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ (–ù–ï –ò–ó–ú–ï–ù–Ø–õ–ê–°–¨)
        if now_moscow.hour < 17:
            target_dt = now_moscow.replace(hour=17, minute=0, second=0, microsecond=0)
            if target_dt < now_moscow:
                target_dt = now_moscow + timedelta(days=1)
                target_dt = target_dt.replace(hour=10, minute=0, second=0, microsecond=0)
        else:
            target_dt = now_moscow + timedelta(days=1)
            target_dt = target_dt.replace(hour=10, minute=0, second=0, microsecond=0)

        task_datetime_str = target_dt.strftime('%Y-%m-%d %H:%M')
        # –ö–û–ù–ï–¶ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

        task_data = {
            'text': "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            'commentary': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ã–ª –ø—É—Å—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.",
            'datetime': task_datetime_str,
            'performerId': manager_id,
            'order': {'id': order_id}
        }

        response = create_task(task_data)

        if response.get('success'):
            print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")

            # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–†–ö–ï–†–ê: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –ø—É—Å—Ç, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –º–∞—Ä–∫–µ—Ä.
            marker_with_timestamp = f"[{now_moscow.strftime('%Y-%m-%d %H:%M')}] {COMMENT_TASK_MARKER}"
            update_response = update_order_comment(order_id, marker_with_timestamp)
            if update_response.get('success'):
                print(f"  ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä–æ–º {COMMENT_TASK_MARKER}.")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–∞—Ä–∫–µ—Ä–æ–º {COMMENT_TASK_MARKER}: {update_response}")

        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': {response}")

        print("-" * 50)
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –ø—É—Å—Ç –∏ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –ù–ï–ü–£–°–¢–û–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–°—Ü–µ–Ω–∞—Ä–∏–π –ë –∏ –í) ---

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    last_entries_to_analyze = extract_last_entries(operator_comment)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if not last_entries_to_analyze:
        print(f"  ‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–∫–∞–∑.")
        print("-" * 50)
        return

    print(f"  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n{last_entries_to_analyze}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ OpenAI
    tasks_to_create = analyze_comment_with_openai(last_entries_to_analyze)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ RetailCRM
    if tasks_to_create:
        print("  ‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—ã—Ç–∫–∞ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è...")
        for i, task_info in enumerate(tasks_to_create):
            try:
                task_date_str = task_info.get('date_time')
                task_text = task_info.get('task')
                task_comment = task_info.get('commentary')

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not (task_date_str and task_text and task_date_str.strip() and task_text.strip()):
                    print(
                        f"    –í –æ—Ç–≤–µ—Ç–µ OpenAI –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (task, date_time) –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É #{i + 1}.")
                    continue

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                corrected_datetime_str = get_corrected_datetime(task_date_str, now_moscow)

                task_data = {
                    'text': task_text,
                    'commentary': task_comment,
                    'datetime': corrected_datetime_str,
                    'performerId': manager_id,
                    'order': {'id': order_id}
                }

                response = create_task(task_data)

                if response.get('success'):
                    task_id = response.get('id')
                    print(f"    –ó–∞–¥–∞—á–∞ #{i + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task_id}")

                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                    line_to_mark = task_info.get('marked_line')
                    new_comment = operator_comment.replace(line_to_mark, f"{line_to_mark}{MARKER}")

                    update_response = update_order_comment(order_id, new_comment)
                    if update_response.get('success'):
                        print(f"    ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                        operator_comment = new_comment  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {update_response}")
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{i + 1}: {response}")

            except (ValueError, TypeError) as e:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ #{i + 1}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

    else:
        # --- –õ–û–ì–ò–ö–ê: –ù–µ—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–°—Ü–µ–Ω–∞—Ä–∏–π –í) ---
        # –ó–¥–µ—Å—å –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –º–∞—Ä–∫–µ—Ä–∞ CONTACT_TASK_MARKER –Ω–µ—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("  ‚ùå OpenAI –Ω–µ –Ω–∞—à–µ–ª —è–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '–î–ê–¢–ê - –î–ï–ô–°–¢–í–ò–ï'.")

        # –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
        tomorrow_10am = now_moscow + timedelta(days=1)
        tomorrow_10am = tomorrow_10am.replace(hour=10, minute=0, second=0, microsecond=0)
        task_datetime_str = tomorrow_10am.strftime('%Y-%m-%d %H:%M')

        task_data = {
            'text': "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è",
            'commentary': "–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '–î–ê–¢–ê - –î–ï–ô–°–¢–í–ò–ï'. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∫–∞—Å–∞–Ω–∏–µ.",
            'datetime': task_datetime_str,
            'performerId': manager_id,
            'order': {'id': order_id}
        }

        response = create_task(task_data)

        if response.get('success'):
            print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")

            # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–†–ö–ï–†–ê: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –∫–æ–Ω–µ—Ü –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã.
            new_comment = f"{operator_comment}\n[{now_moscow.strftime('%Y-%m-%d %H:%M')}] {CONTACT_TASK_MARKER}"
            update_response = update_order_comment(order_id, new_comment)
            if update_response.get('success'):
                print(f"    ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä–æ–º {CONTACT_TASK_MARKER}.")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {update_response}")

        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è': {response}")

    print("-" * 50)


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–ï–ì–õ–ê–ú–ï–ù–¢ –î–õ–Ø –ü–†–û–ü–£–©–ï–ù–ù–´–• –ó–í–û–ù–ö–û–í ---

def process_missed_call_reglament(orders_list: list, now_moscow: datetime):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫":
    —Å–æ–∑–¥–∞–µ—Ç 9 –∑–∞–¥–∞—á –Ω–∞ 3 –¥–Ω—è, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
    """
    print(f"\n--- –ó–∞–ø—É—Å–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –¥–ª—è {len(orders_list)} –∑–∞–∫–∞–∑–æ–≤ ({MISSED_CALL_METHOD}) ---")

    # –ñ–ï–°–¢–ö–û –ó–ê–ö–û–î–ò–†–û–í–ê–ù–ù–´–ô –ì–†–ê–§–ò–ö –ó–ê–î–ê–ß
    # –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –°–ï–ì–û–î–ù–Ø–®–ù–ï–ì–û –∑–∞–ø—É—Å–∫–∞ (now_moscow)
    # 1. –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (1-–π –¥–µ–Ω—å)
    #    - –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 10 –º–∏–Ω—É—Ç
    #    - –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞: + 1 —á–∞—Å –æ—Ç –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
    #    - –¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞: –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (17:00)

    task_schedule = [
        # –î–ï–ù–¨ 1 (–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å Now + 10 –º–∏–Ω)
        {
            'text': "1-–π –∑–≤–æ–Ω–æ–∫ —Å –ª–∏–Ω–∏–∏ + WA",
            'commentary': "–ó–≤–æ–Ω–æ–∫ —Å –ª–∏–Ω–∏–∏ –ø–æ Softfone + —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —à–∞–±–ª–æ–Ω –≤ WA –æ –Ω–µ–¥–æ–∑–≤–æ–Ω–µ. (–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 0,
            'time_offset_minutes': 10
        },
        {
            'text': "2-–π –∑–≤–æ–Ω–æ–∫ —Å iPhone (—á–µ—Ä–µ–∑ —á–∞—Å)",
            'commentary': "2 –∑–≤–æ–Ω–æ–∫ —Å –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞ iPhone —á–µ—Ä–µ–∑ —á–∞—Å. (–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 0,
            'time_hour': 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ 0, –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–∞–∫ 1-—è –∑–∞–¥–∞—á–∞ + 1 —á–∞—Å
            'is_relative': True
        },
        {
            'text': "3-–π –∑–≤–æ–Ω–æ–∫ —Å HUAWEI (–∫–æ–Ω–µ—Ü –¥–Ω—è)",
            'commentary': "3 –∑–≤–æ–Ω–æ–∫ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–æ–º–µ—Ä–∞ HUAWEI –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. (–¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 0,
            'time_hour': 17,
            'time_minute': 0
        },

        # –î–ï–ù–¨ 2 (–ó–∞–≤—Ç—Ä–∞)
        {
            'text': "4-–π –∑–≤–æ–Ω–æ–∫ (–£—Ç—Ä–æ + WA Check)",
            'commentary': "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WA, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, –∑–≤–æ–Ω–∏–º –µ—â–µ —Ä–∞–∑ —Å —É—Ç—Ä–∞ (–æ–∫–æ–ª–æ 11:00). (–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 1,
            'time_hour': 11,
            'time_minute': 0
        },
        {
            'text': "5-–π –∑–≤–æ–Ω–æ–∫ —Å iPhone",
            'commentary': "2 –∑–≤–æ–Ω–æ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–Ω—è —Å iPhone (–æ–∫–æ–ª–æ 14:00). (–ü—è—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 1,
            'time_hour': 14,
            'time_minute': 0
        },
        {
            'text': "6-–π –∑–≤–æ–Ω–æ–∫ —Å HUAWEI",
            'commentary': "3 –∑–≤–æ–Ω–æ–∫ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–æ–º–µ—Ä–∞ HUAWEI (–æ–∫–æ–ª–æ 17:00). (–®–µ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 1,
            'time_hour': 17,
            'time_minute': 0
        },

        # –î–ï–ù–¨ 3 (–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)
        {
            'text': "7-–π –∑–≤–æ–Ω–æ–∫ (–£—Ç—Ä–æ + WA Check)",
            'commentary': "–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—á–∏—Ç–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WA, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, –∑–≤–æ–Ω–∏–º –µ—â–µ —Ä–∞–∑ —Å —É—Ç—Ä–∞ (–æ–∫–æ–ª–æ 11:00). (–°–µ–¥—å–º–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 2,
            'time_hour': 11,
            'time_minute': 0
        },
        {
            'text': "8-–π –∑–≤–æ–Ω–æ–∫ —Å iPhone",
            'commentary': "2 –∑–≤–æ–Ω–æ–∫ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–Ω—è —Å iPhone (–æ–∫–æ–ª–æ 14:00). (–í–æ—Å—å–º–∞—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 2,
            'time_hour': 14,
            'time_minute': 0
        },
        {
            'text': "9-–π –∑–≤–æ–Ω–æ–∫ —Å HUAWEI + WA Cancel",
            'commentary': "3 –∑–≤–æ–Ω–æ–∫ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–æ–º–µ—Ä–∞ HUAWEI (–æ–∫–æ–ª–æ 17:00) –∏ –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω–µ –¥–æ–∑–≤–æ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp —à–∞–±–ª–æ–Ω –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äú–ù–î–ó - 3-–π –¥–µ–Ω—å (–æ—Ç–º–µ–Ω–∞)‚Äù. (–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞)",
            'day_offset': 2,
            'time_hour': 17,
            'time_minute': 0
        },
    ]

    for order_data in orders_list:
        order_id = order_data.get('id')
        manager_id = order_data.get('managerId')
        operator_comment = order_data.get('managerComment', '')

        print(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID: {order_id}")

        if not manager_id:
            print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—â–∏–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞
        if MISSED_CALL_TASK_MARKER in operator_comment:
            print(f"  ‚úÖ –ó–∞–∫–∞–∑ {order_id} —É–∂–µ –∏–º–µ–µ—Ç –º–∞—Ä–∫–µ—Ä '{MISSED_CALL_TASK_MARKER}'. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            print("-" * 50)
            continue

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ (Now + 10 –º–∏–Ω—É—Ç)
        first_task_time = now_moscow + timedelta(minutes=10)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è 2-–π –∑–∞–¥–∞—á–∏)
        last_task_time = first_task_time

        all_tasks_created = True

        for task_config in task_schedule:

            # --- –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò –ó–ê–î–ê–ß–ò ---
            task_dt = None

            if task_config.get('is_relative'):
                # –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞: + 1 —á–∞—Å –æ—Ç –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
                task_dt = last_task_time + timedelta(hours=1)
            elif task_config['day_offset'] == 0:
                # –ü–µ—Ä–≤–∞—è –∏ –¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞ 1-–≥–æ –¥–Ω—è
                if task_config.get('time_offset_minutes'):
                    # 1-—è –∑–∞–¥–∞—á–∞
                    task_dt = first_task_time
                elif task_config.get('time_hour'):
                    # 3-—è –∑–∞–¥–∞—á–∞ (–Ω–∞ 17:00)
                    target_time = now_moscow.replace(hour=task_config['time_hour'], minute=task_config['time_minute'],
                                                     second=0, microsecond=0)
                    if target_time > first_task_time:
                        # –ï—Å–ª–∏ 17:00 –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, —Å—Ç–∞–≤–∏–º –Ω–∞ 17:00 —Å–µ–≥–æ–¥–Ω—è
                        task_dt = target_time
                    else:
                        # –ï—Å–ª–∏ 17:00 —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 17:00
                        task_dt = (now_moscow + timedelta(days=1)).replace(hour=task_config['time_hour'],
                                                                           minute=task_config['time_minute'], second=0,
                                                                           microsecond=0)
            else:
                # –ó–∞–¥–∞—á–∏ 2-–≥–æ –∏ 3-–≥–æ –¥–Ω—è (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è)
                task_dt = (now_moscow + timedelta(days=task_config['day_offset'])).replace(
                    hour=task_config['time_hour'],
                    minute=task_config['time_minute'],
                    second=0, microsecond=0
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º last_task_time –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Ö–æ—Ç—è –≤ –Ω–∞—à–µ–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–µ –æ–Ω–∞ –æ–¥–Ω–∞)
            if task_config['day_offset'] == 0 and not task_config.get('is_relative'):
                last_task_time = task_dt

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å)
            if task_dt < now_moscow - timedelta(minutes=5):
                print(
                    f"    ‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{task_config['text']}' –∏–º–µ–µ—Ç –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è {task_dt.strftime('%Y-%m-%d %H:%M')}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º

            # --- –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ß–ò ---

            task_data = {
                'text': task_config['text'],
                'commentary': task_config['commentary'],
                'datetime': task_dt.strftime('%Y-%m-%d %H:%M'),
                'performerId': manager_id,
                'order': {'id': order_id}
            }

            response = create_task(task_data)

            if response.get('success'):
                print(
                    f"    ‚úÖ –ó–∞–¥–∞—á–∞ '{task_config['text']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {task_dt.strftime('%Y-%m-%d %H:%M')}. ID: {response.get('id')}")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{task_config['text']}': {response}")
                all_tasks_created = False  # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å, —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥

        # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–†–ö–ï–†–ê ---
        if all_tasks_created:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
            marker_with_timestamp = f"\n[{now_moscow.strftime('%Y-%m-%d %H:%M')}] {MISSED_CALL_TASK_MARKER}"
            new_comment = f"{operator_comment}{marker_with_timestamp}"

            update_response = update_order_comment(order_id, new_comment)
            if update_response.get('success'):
                print(f"  ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É ID {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä–æ–º '{MISSED_CALL_TASK_MARKER}'.")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–∞—Ä–∫–µ—Ä–æ–º: {update_response}")
        else:
            print(
                f"  ‚ùå –ù–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id} –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã. –ú–∞—Ä–∫–µ—Ä '{MISSED_CALL_TASK_MARKER}' –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω.")

        print("-" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")

    # –®–∞–≥ 0: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    now_moscow = datetime.now(MOSCOW_TZ)
    current_time_str = now_moscow.strftime('%H:%M')
    current_hour = now_moscow.hour
    is_evening_run = current_hour == 21  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 21:xx

    # --- –ë–õ–û–ö 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–∑–∞–≤–∏—Å—à–∏–µ" —Å—Ç–∞—Ç—É—Å—ã ---
    process_status_trackers(now_moscow)

    # --- –ë–õ–û–ö 2: –ù–û–í–´–ô –†–ï–ì–õ–ê–ú–ï–ù–¢ –î–õ–Ø –ü–†–û–ü–£–©–ï–ù–ù–´–• –ó–í–û–ù–ö–û–í (12:00 –∏ 16:00) ---
    if current_hour == 12 or current_hour == 16:
        print(f"\n--- –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–í—Ä–µ–º—è: {current_time_str}) ---")

        date_from = None
        date_to = now_moscow.strftime('%Y-%m-%d %H:%M:%S')

        if current_hour == 12:
            # –ó–∞–ø—É—Å–∫ –≤ 12:00: —Å 16:01 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –¥–æ 12:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            yesterday_1601 = (now_moscow - timedelta(days=1)).replace(hour=16, minute=1, second=0, microsecond=0)
            date_from = yesterday_1601.strftime('%Y-%m-%d %H:%M:%S')

        elif current_hour == 16:
            # –ó–∞–ø—É—Å–∫ –≤ 16:00: —Å 12:01 –¥–æ 16:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            today_1201 = now_moscow.replace(hour=12, minute=1, second=0, microsecond=0)
            date_from = today_1201.strftime('%Y-%m-%d %H:%M:%S')

        print(f"  –ò—â–µ–º –∑–∞–∫–∞–∑—ã ({MISSED_CALL_METHOD}) –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {date_from} ‚Äî {date_to}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ CRM
        missed_call_orders_data = get_orders_by_method_and_date_range(MISSED_CALL_METHOD, date_from, date_to)

        if missed_call_orders_data:
            missed_call_orders = missed_call_orders_data.get('orders', [])
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(missed_call_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É '{MISSED_CALL_METHOD}'.")
            process_missed_call_reglament(missed_call_orders, now_moscow)
        else:
            print(f"  –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ –º–µ—Ç–æ–¥—É '{MISSED_CALL_METHOD}' –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            print("-" * 50)

    # --- –ë–õ–û–ö 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ 21:00) ---
    if is_evening_run:
        print(f"\n--- –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–í—Ä–µ–º—è: {current_time_str}) ---")

        today_date_str = now_moscow.strftime('%Y-%m-%d')

        undelivered_orders_data = get_orders_by_delivery_date(today_date_str)

        if undelivered_orders_data:
            undelivered_orders = undelivered_orders_data.get('orders', [])
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(undelivered_orders)} –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            process_undelivered_orders(undelivered_orders, now_moscow)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        print(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ó–∞–ø—É—Å–∫ –≤ {current_time_str}) ---")

    # --- –ë–õ–û–ö 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–û–°–¢–ê–í–õ–ï–ù–û) ---
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –ë–õ–û–ö 3 –≤ –ë–õ–û–ö 4
    print("\n--- –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---")

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–∫–∞–∑–æ–≤
    orders_data = get_recent_orders(limit=50)

    if not orders_data:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫–∞.")
    else:
        orders = orders_data.get('orders', [])

        if not orders:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫–∞.")
        else:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")

            # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for order_data in orders:
                process_order(order_data)

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()
