import os
import json
import pytz
from datetime import datetime, timedelta
from dotenv import load_dotenv
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_orders_by_delivery_date
from retailcrm_api import get_recent_orders, create_task, update_order_comment, get_orders_by_delivery_date
from openai_processor import analyze_comment_with_openai

load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MARKER = ' üìÖ'

# –°–¢–ê–¢–£–°–´, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ù–£–ñ–ù–û —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.
ALLOWED_STATUSES = [
    "new",
    "gotovo-k-soglasovaniiu",
    "soglasovat-sostav",
    "agree-absence",
    "novyi-predoplachen",
    "novyi-oplachen",
    "availability-confirmed",
    "client-confirmed",
    "offer-analog",
    "ne-dozvonilis",
    "perezvonit-pozdnee",
    "otpravili-varianty-na-pochtu",
    "otpravili-varianty-v-vatsap",
    "ready-to-wait",
    "waiting-for-arrival",
    "klient-zhdet-foto-s-zakupki",
    "vizit-v-shourum",
    "ozhidaet-oplaty",
    "gotovim-kp",
    "kp-gotovo-k-zashchite",
    "soglasovanie-kp",
    "proekt-visiak",
    "soglasovano",
    "oplacheno",
    "prepayed",
    "soglasovan-ozhidaet-predoplaty",
    "vyezd-biologa-oplachen",
    "vyezd-biologa-zaplanirovano",
    "predoplata-poluchena",
    "oplata-ne-proshla",
    "proverka-nalichiia",
    "obsluzhivanie-zaplanirovano",
    "obsluzhivanie-soglasovanie",
    "predoplachen-soglasovanie",
    "servisnoe-obsluzhivanie-oplacheno",
    "zakaz-obrabotan-soglasovanie",
    "vyezd-biologa-soglasovanie"
]
# –ú–ï–¢–û–î–´, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–û –∏—Å–∫–ª—é—á–∏—Ç—å.
EXCLUDED_METHODS = ['servisnoe-obsluzhivanie', 'komus']

# –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
UNDELIVERED_CODES = ["self-delivery", "storonniaia-dostavka"]
DELIVERED_STATUSES = ["send-to-delivery", "dostavlen"]


def get_corrected_datetime(ai_datetime_str: str, current_script_time: datetime) -> str:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏, —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º:
    1. –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.
    2. –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ (OpenAI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 10:00), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç +1 —á–∞—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    3. –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ (–ø–æ—Å–ª–µ 20:00), –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 10:00.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∫—Ä–∏–ø—Ç–∞
        now_moscow = datetime.now(MOSCOW_TZ)

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI
        task_dt = datetime.strptime(ai_datetime_str, '%Y-%m-%d %H:%M').replace(tzinfo=MOSCOW_TZ)

        # –ü–†–ê–í–ò–õ–û 1: –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.
        if task_dt.date() < now_moscow.date():
            raise ValueError("–ó–∞–¥–∞—á–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–µ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞.")

        # –ü–†–ê–í–ò–õ–û 2: –ï—Å–ª–∏ OpenAI –≤–µ—Ä–Ω—É–ª –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10:00), –∏—Å–ø–æ–ª—å–∑—É–µ–º +1 —á–∞—Å
        if task_dt.hour == 10 and task_dt.minute == 0:
            task_dt = now_moscow + timedelta(hours=1)
            task_dt = task_dt.replace(second=0, microsecond=0)

        # –ü–†–ê–í–ò–õ–û 3: –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ (–ø–æ—Å–ª–µ 20:00), –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if task_dt.hour >= 20:
            task_dt = now_moscow + timedelta(days=1)
            task_dt = task_dt.replace(hour=10, minute=0, second=0, microsecond=0)

        return task_dt.strftime('%Y-%m-%d %H:%M')

    except (ValueError, TypeError) as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
        raise e


def extract_last_entries(comment: str, num_entries: int = 3) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –æ–±—ä–µ–¥–∏–Ω—è—è —ç—Ç–∏ –∑–∞–ø–∏—Å–∏.
    """
    lines = [line.strip() for line in comment.strip().split('\n') if line.strip()]

    unprocessed_lines = []
    for line in reversed(lines):
        if not line.endswith(MARKER.strip()):
            unprocessed_lines.insert(0, line)
        else:
            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 'num_entries' –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    return '\n'.join(unprocessed_lines[-num_entries:])


def process_undelivered_orders(orders_list: list, now_moscow: datetime):
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
    –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –∫–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ü–µ–ª–µ–≤–æ–π, –∞ —Å—Ç–∞—Ç—É—Å –Ω–µ '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'.
    """

    print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ ---")

    for order_data in orders_list:
        order_id = order_data.get('id')
        manager_id = order_data.get('managerId')
        delivery_code = order_data.get('delivery', {}).get('code')
        order_status = order_data.get('status')

        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ID: {order_id}")

        if not manager_id:
            print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # 1. –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏
        if delivery_code not in UNDELIVERED_CODES:
            print(f"  –ö–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}' –Ω–µ—Ü–µ–ª–µ–≤–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # 2. –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" –∏–ª–∏ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        if order_status not in DELIVERED_STATUSES:
            print(
                f"  ‚ö†Ô∏è –ó–∞–∫–∞–∑ ID: {order_id} –∏–º–µ–µ—Ç –∫–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}', –Ω–æ —Å—Ç–∞—Ç—É—Å '{order_status}'. –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É.")

            # –ó–∞–¥–∞—á–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 (—Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å 21:00)
            tomorrow_10am = now_moscow + timedelta(days=1)
            tomorrow_10am = tomorrow_10am.replace(hour=10, minute=0, second=0, microsecond=0)
            task_datetime_str = tomorrow_10am.strftime('%Y-%m-%d %H:%M')

            task_data = {
                'text': "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏",
                'commentary': f"–ó–∞–∫–∞–∑ —Å–æ —Å–ø–æ—Å–æ–±–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ '{delivery_code}' –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{order_status}'. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å.",
                'datetime': task_datetime_str,
                'performerId': manager_id,
                'order': {'id': order_id}
            }

            response = create_task(task_data)

            if response.get('success'):
                print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏': {response}")
        else:
            print(f"  –°—Ç–∞—Ç—É—Å '{order_status}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        print("-" * 50)


def process_order(order_data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏.
    –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    order_id = order_data.get('id')
    operator_comment = order_data.get('managerComment', '')
    manager_id = order_data.get('managerId')
    order_method = order_data.get('orderMethod')
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order_status = order_data.get('status')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    now_moscow = datetime.now(MOSCOW_TZ)

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ID: {order_id}")

    # --- –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ---
    # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
    if order_method in EXCLUDED_METHODS:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –º–µ—Ç–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è '{order_method}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –º–µ—Ç–æ–¥–æ–≤.")
        print("-" * 50)
        return

    # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É (–≤–∫–ª—é—á–µ–Ω–∏–µ)
    if order_status not in ALLOWED_STATUSES:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} —Å—Ç–∞—Ç—É—Å '{order_status}' –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        print("-" * 50)
        return
    # --- –ö–æ–Ω–µ—Ü —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---

    if not manager_id:
        print(f"  –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    if not operator_comment:
        print(f"  ‚ö†Ô∏è –í –∑–∞–∫–∞–∑–µ {order_id} –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")

        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –ü–£–°–¢–û–ì–û –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–°—Ü–µ–Ω–∞—Ä–∏–π –ê) ---

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–æ 17:00 (–∑–∞–ø—É—Å–∫ –≤ 12 –∏–ª–∏ 16), —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 17:00
        if now_moscow.hour < 17:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, 17:00
            target_dt = now_moscow.replace(hour=17, minute=0, second=0, microsecond=0)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ 17:00, —Å—Ç–∞–≤–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if target_dt < now_moscow:
                target_dt = now_moscow + timedelta(days=1)
                target_dt = target_dt.replace(hour=10, minute=0, second=0, microsecond=0)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ 21:00 (–∏–ª–∏ –ø–æ—Å–ª–µ 17:00)
        else:
            # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 (–∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ 21:00)
            target_dt = now_moscow + timedelta(days=1)
            target_dt = target_dt.replace(hour=10, minute=0, second=0, microsecond=0)

        task_datetime_str = target_dt.strftime('%Y-%m-%d %H:%M')
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –°—Ü–µ–Ω–∞—Ä–∏—è –ê ---

        task_data = {
            'text': "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            'commentary': "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ã–ª –ø—É—Å—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.",
            'datetime': task_datetime_str,
            'performerId': manager_id,
            'order': {'id': order_id}
        }

        response = create_task(task_data)

        if response.get('success'):
            print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': {response}")

        print("-" * 50)
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—É—Å—Ç

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –ù–ï–ü–£–°–¢–û–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–°—Ü–µ–Ω–∞—Ä–∏–π –ë –∏ –í) ---

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    last_entries_to_analyze = extract_last_entries(operator_comment)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if not last_entries_to_analyze:
        print(f"  ‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–∫–∞–∑.")
        print("-" * 50)
        return

    print(f"  –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n{last_entries_to_analyze}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ OpenAI
    tasks_to_create = analyze_comment_with_openai(last_entries_to_analyze)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ RetailCRM
    if tasks_to_create:
        print("  ‚úÖ OpenAI —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—ã—Ç–∫–∞ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è...")
        for i, task_info in enumerate(tasks_to_create):
            try:
                task_date_str = task_info.get('date_time')
                task_text = task_info.get('task')
                task_comment = task_info.get('commentary')

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not (task_date_str and task_text and task_date_str.strip() and task_text.strip()):
                    print(
                        f"    –í –æ—Ç–≤–µ—Ç–µ OpenAI –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (task, date_time) –∏–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É #{i + 1}.")
                    continue

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º now_moscow, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤—ã—à–µ
                corrected_datetime_str = get_corrected_datetime(task_date_str, now_moscow)

                # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

                task_data = {
                    'text': task_text,
                    'commentary': task_comment,
                    'datetime': corrected_datetime_str,
                    'performerId': manager_id,
                    'order': {'id': order_id}
                }

                response = create_task(task_data)

                if response.get('success'):
                    task_id = response.get('id')
                    print(f"    –ó–∞–¥–∞—á–∞ #{i + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {task_id}")

                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                    line_to_mark = task_info.get('marked_line')
                    new_comment = operator_comment.replace(line_to_mark, f"{line_to_mark}{MARKER}")

                    update_response = update_order_comment(order_id, new_comment)
                    if update_response.get('success'):
                        print(f"    ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {update_response}")
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{i + 1}: {response}")

            except (ValueError, TypeError) as e:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ #{i + 1}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

    else:
        # --- –õ–û–ì–ò–ö–ê: –ù–µ—Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–°—Ü–µ–Ω–∞—Ä–∏–π –í) ---
        print("  ‚ùå OpenAI –Ω–µ –Ω–∞—à–µ–ª —è–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '–î–ê–¢–ê - –î–ï–ô–°–¢–í–ò–ï'.")

        # –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        tomorrow_10am = now_moscow + timedelta(days=1)
        tomorrow_10am = tomorrow_10am.replace(hour=10, minute=0, second=0, microsecond=0)
        task_datetime_str = tomorrow_10am.strftime('%Y-%m-%d %H:%M')

        task_data = {
            'text': "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è",
            'commentary': "–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '–î–ê–¢–ê - –î–ï–ô–°–¢–í–ò–ï'. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∫–∞—Å–∞–Ω–∏–µ.",
            'datetime': task_datetime_str,
            'performerId': manager_id,
            'order': {'id': order_id}
        }

        response = create_task(task_data)

        if response.get('success'):
            print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞–¥–∞—á–∏: {response.get('id')}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∫–∞—Å–∞–Ω–∏—è': {response}")

    print("-" * 50)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")

    # –®–∞–≥ 0: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    now_moscow = datetime.now(MOSCOW_TZ)
    current_time_str = now_moscow.strftime('%H:%M')
    is_evening_run = now_moscow.hour == 21  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 21:xx

    # --- –ë–õ–û–ö 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ 21:00) ---
    if is_evening_run:
        print(f"\n--- –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–í—Ä–µ–º—è: {current_time_str}) ---")

        today_date_str = now_moscow.strftime('%Y-%m-%d')

        undelivered_orders_data = get_orders_by_delivery_date(today_date_str)

        if undelivered_orders_data:
            undelivered_orders = undelivered_orders_data.get('orders', [])
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(undelivered_orders)} –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            process_undelivered_orders(undelivered_orders, now_moscow)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        print(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–ó–∞–ø—É—Å–∫ –≤ {current_time_str}) ---")

    # --- –ë–õ–û–ö 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–∫–∞–∑–æ–≤ ---
    print("\n--- –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---")

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–∫–∞–∑–æ–≤
    orders_data = get_recent_orders(limit=50)

    if not orders_data:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞.")
    else:
        orders = orders_data.get('orders', [])

        if not orders:
            print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞.")
        else:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")

            # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for order_data in orders:
                process_order(order_data)

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()
