import os
import openai
import json
import re
from datetime import datetime
from dotenv import load_dotenv
from typing import List, Dict, Any

load_dotenv()

# Устанавливаем ключ API из переменных окружения
openai.api_key = os.getenv('OPENAI_API_KEY')


def analyze_comment_with_openai(comment: str) -> List[Dict[str, Any]]:
    """
    Отправляет комментарий на анализ в OpenAI и возвращает список найденных задач
    в виде JSON-объектов.
    """
    if not openai.api_key:
        print("Ошибка: Ключ OpenAI API не установлен.")
        return []

    # Получаем текущие дату и время для промпта
    current_datetime_str = datetime.now().strftime("%Y-%m-%d %H:%M")

    system_prompt = f"""
Ты — продвинутый ассистент, CRM-менеджер-помощник. Твоя единственная задача — анализировать комментарии и извлекать из них **только будущие задачи для менеджеров по продажам**, которые соответствуют **СТРОГОМУ ФОРМАТУ**.

## Инструкции и Главное Правило
1.  **СТРОГИЙ ФОРМАТ:** Задача должна быть поставлена только в том случае, если она записана в **строгом формате "ДАТА - ДЕЙСТВИЕ"**.
    * **ДАТА** должна быть указана в формате DD.MM (например, 18.10) или DD/MM.
    * **ДЕЙСТВИЕ** должно быть отделено от даты **дефисом** (`-`).
    * **Относительные даты** (например, "завтра", "через 3 дня", "во вторник") **НЕ ПРИНИМАЮТСЯ** и должны игнорироваться.
2.  **Строгое игнорирование:** Полностью игнорируй любые записи, которые не требуют будущих действий или не соответствуют строгому формату:
    -   Уже произошедшие события (прошедшие звонки, встречи).
    -   Текущие статусы заказа ("дубль", "закрыл", "направлено кп").
    -   Задачи для других отделов (логистика, курьеры).
    -   Любые записи, не соответствующие формату "ДАТА - ДЕЙСТВИЕ".
3.  **Год**: Для всех дат используй текущий год (`{datetime.now().year}`), если год не указан в тексте.
4.  **Время**: Если в тексте не указано конкретное время, используй текущее время `{current_datetime_str}` и прибавь один час.
    **Важное правило:** Если итоговое время получается после 20:00, перенеси задачу на следующий день на 10:00.
5.  **Слова-синонимы**: Слово "кас" является сокращением от "касание".

## СТРОГОЕ И ЖЁСТКОЕ ПРАВИЛО:
Верни пустой массив `[]`, если в комментарии **нет явного и прямого** указания на будущую дату в **строгом формате "ДАТА - ДЕЙСТВИЕ"**.

## Формат ответа
Твой ответ должен быть **исключительно** в формате JSON-массива. Каждый объект в массиве должен иметь следующие три поля:
-   `task`: Краткое описание задачи (например, "Перезвонить", "Отправить КП", "Связаться с клиентом").
-   `date_time`: Дата и время выполнения задачи в строгом формате `ГГГГ-ММ-ДД ЧЧ:ММ`. Для всех дат используй текущую дату (`{current_datetime_str}`) для расчёта.
-   `marked_line`: Точная строка из исходного текста, которая содержит эту задачу.

Если в тексте нет ни одной подходящей будущей задачи, верни пустой JSON-массив: `[]`.

## Примеры для обучения (Новый строгий режим)
**Пример 1 (Задача НАЙДЕНА — Соответствует формату):**
-   **Входной текст:** "Заказ № 11234\n28.10 - перезвонить клиенту\nотменил заказ"
-   **Ожидаемый JSON-ответ:**
    ```json
    [
      {{
        "task": "Перезвонить клиенту",
        "date_time": "2025-10-28 10:00",
        "marked_line": "28.10 - перезвонить клиенту"
      }}
    ]
    ```

**Пример 2 (Задача НАЙДЕНА — Несколько задач):**
-   **Входной текст:** "15.10 - предложить варианты растений\n16.10 - отправить ссылку"
-   **Ожидаемый JSON-ответ:**
    ```json
    [
      {{
        "task": "Предложить варианты растений",
        "date_time": "2025-10-15 10:00",
        "marked_line": "15.10 - предложить варианты растений"
      }},
      {{
        "task": "Отправить ссылку",
        "date_time": "2025-10-16 10:00",
        "marked_line": "16.10 - отправить ссылку"
      }}
    ]
    ```

**Пример 3 (Задача ИГНОРИРУЕТСЯ — Старый формат и относительная дата):**
-   **Входной текст:** "Клиент попросил отправить КП завтра\nслед кас 21.09"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 4 (Задача ИГНОРИРУЕТСЯ — Прошедшая дата):**
-   **Входной текст:** "Встреча 11.09\nнет связи"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 5 (Задача ИГНОРИРУЕТСЯ — Статус):**
-   **Входной текст:** "22/09 - направлено кп на согласование"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 6 (Задача ИГНОРИРУЕТСЯ — Для курьера):**
-   **Входной текст:** "За 10 мин до прибытия на место позвонить"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 7 (Задача ИГНОРИРУЕТСЯ — Описание без задачи):**
-   **Входной текст:** "нет цикаса и оваты сансет"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 8 (Задача ИГНОРИРУЕТСЯ — Статус):**
-   **Входной текст:** "спам"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

**Пример 9 (Задача НАЙДЕНА — С синонимом в новом формате):**
-   **Входной текст:** "16.09 - кас"
-   **Ожидаемый JSON-ответ:**
    ```json
    [
      {{
        "task": "Связаться с клиентом",
        "date_time": "2025-09-16 10:00",
        "marked_line": "16.09 - кас"
      }}
    ]
    ```

**Пример 10 (Задача ИГНОРИРУЕТСЯ — Прошедший неформатированный статус):**
-   **Входной текст:** "20.09 просто посмотреть, согласовывает с мужем"
-   **Ожидаемый JSON-ответ:**
    ```json
    []
    ```

Твой ответ должен содержать только один JSON-объект, который является массивом.
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            response_format={"type": "json_object"},
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": comment}
            ]
        )

        raw_content = response.choices[0].message.content

        # Проверяем, что raw_content не None, прежде чем обрабатывать его
        if raw_content is None:
            raw_content = ""

        print(f"Сырой ответ от OpenAI: ```json\n{raw_content}\n```")

        # Удаляем лишние символы из ответа, если они есть
        clean_content = re.sub(r'```json\n|```', '', raw_content).strip()

        # Загружаем JSON-данные
        parsed_data = json.loads(clean_content)

        if isinstance(parsed_data, list):
            return [item for item in parsed_data if item.get('task') and item.get('date_time')]
        elif isinstance(parsed_data, dict):
            if parsed_data.get('response') is not None:
                if isinstance(parsed_data.get('response'), list):
                    return [item for item in parsed_data['response'] if item.get('task') and item.get('date_time')]
                else:
                    return []
            elif parsed_data.get('task') and parsed_data.get('date_time'):
                return [parsed_data]
            else:
                return []
        else:
            print("Ошибка: Неожиданный формат ответа от OpenAI.")
            return []

    except json.JSONDecodeError as e:
        print(f"Ошибка декодирования JSON: {e}. Сырой контент: {clean_content}")
        return []
    except openai.APIError as e:
        print(f"Ошибка при запросе к OpenAI API: {e}")
        return []